4-1
#include<iostream>
#include<string>
int main()
{
	std::cout << "what is your first name? ";
	char name[10] = { 0 };
	//getline(char*,int)和get(char*,int)都只能处理数组，不能处理string类等
	std::cin.get(name, 10).get();	
	std::cout << "what is yout last name? ";
	std::string lastName;
	//getline(cin,str)只能处理string类，不能处理数组等
	getline(std::cin, lastName);
	std::cout << "what letter grade do you deserve? ";
	char grade = 0;
	//cin返回cin类
	(std::cin >> grade).get();
	++grade;
	std::cout << "what is your age? ";
	int age = 0;
	std::cin >> age;
	std::cout << "Name: " << lastName << ", " << name << std::endl;
	std::cout << "Grade: " << grade << std::endl;
	std::cout << "Age: " << age;
	return 0;
}

4-2
#include<iostream>
#include<string>
int main()
{
	std::string name;
	std::cout << "enter your name: ";
	//注意，getline（cin,str)版本是string的I/O，目前只学了这个处理string类的函数
	getline(std::cin, name);
	std::string dessert;
	std::cout << "enter yout favourite dessert: ";
	getline(std::cin, dessert);
	std::cout << "I have some delicious "
		<< dessert
		<< " for you, "
		<< name;
	return 0
}

4-3
#include<iostream>
#include<cstring>
int main()
{
	std::cout << "enter your first name: ";
	const int arSize = 10;
	char fname[2*arSize];
	std::cin.getline(fname, 2*arSize);
	char lname[arSize];
	std::cout << "enter your last name: ";
	std::cin.getline(lname, arSize);
	strcat_s(fname, ",");
	//严格来说应该用arSize-strlen(fname)-1
	strncat_s(fname, lname,strlen(fname));
	std::cout << "here's the information in a single string: "
		<< fname;
	return 0;
}

4-4
#include<iostream>
#include<string>
int main()
{
	std::cout << "enter your first name: ";
	std::string fname;
	std::cin >> fname;
	std::cout << "enter your last name: ";
	std::string lname;
	std::cin >> lname;
	fname = fname + "," + lname;
	std::cout << "here's the information in a single string: "
		<< fname;
	return EXIT_SUCCESS;
}

4-5
#include<iostream>
int main()
{
	//javad的命名风格可以借鉴
	struct candyBar
	{
		char brand[20];
		double weight;
		int calorie;
	}snack =
	{
		"Mocha Munch",
		2.3,
		350
	};
	std::cout << snack.brand
		<< snack.weight
		<< snack.calorie;
	return 0;
}

4-6
#include<iostream>
int main()
{
	struct candyBar
	{
		char brand[20];
		double weight;
		int calorie;
	}snack[5] = {};
	for (int i = 0; i < 5; i++)
	{
		/*这段代码第二个输出是错的，单纯想复习
		句点运算符的优先级比解引用要高
		很有意思的是这个地方只打印了15个零，照理来说应该是20个
		使用snack[i].brand时将char字符数组处理为字符串输出，即空字符，就什么都没有*/
		std::cout << snack[i].brand
			<< snack->weight
			<< (*(snack + i)).weight
			<< (snack + i)->calorie;
	}
	return 0;
}

4-7
#include<iostream>
#include<string>
#define SIZE 5
struct Pizza
{
	std::string name;
	double diameter;
	double weight;
};
int main()
{
	Pizza pizza[SIZE];
	for (int i = 0; i < SIZE; i++)
	{
		std::cout << "enter the company of the pizza #"
			<< i + 1 << ": ";
		//再此再给自己强调一遍，getline(cin,str)是string类io
		getline(std::cin, (pizza+i) -> name);
		std::cout << "then enter the pizza diameter: ";
		std::cin >> (*(pizza+i)).diameter;
		std::cout << "at last enter the pizza weight: ";
		std::cin >> pizza[i].weight;
		std::cin.get();
	}
	for (int i = 0; i < SIZE; i++)
		std::cout << pizza[i].name
		<< pizza[i].diameter
		<< pizza[i].weight
		<< std::endl;

	return 0;  
}

4-8
#include<iostream>
#include<string>
#define SIZE 5
struct Pizza
{
	std::string name;
	double diameter;
	double weight;
};
int main()
{
	Pizza* pt = new Pizza[SIZE];
	for (int i = 0; i < SIZE; i++)
	{
		std::cout << "then enter the pizza diameter: ";
		std::cin >> (*(pt + i)).diameter;
		std::cin.get();
		std::cout << "enter the company of the pizza #"
			<< i + 1 << ": ";
		getline(std::cin, (pt + i)->name);

		std::cout << "at last enter the pizza weight: ";
		std::cin >> pt[i].weight;
	}
	for (int i = 0; i < SIZE; i++)
		std::cout << (pt+i)->name
		<< (*(pt + i)).diameter
		<< pt[i].weight
		<< std::endl;
	delete[]pt;
	return 0;
}

4-9

4-10
#include<array>
#include<iostream>

int main()
{
	const int num = 3;
	double sum = 0;
	int i = 0;
	std::array<int, num>student;
	for (i = 0; i < num; i++)
	{
		std::cout << "enter your grade in round#"
			<< i + 1 << ": ";
		std::cin >> student[i];
		sum += student[i];
	}
	std::cout << "round " << i << " total, "
		<< "your average grade is " << sum / 3;
	return 0;
}
